/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: FREEBAYES {
        ext.args = [
            "--ploidy 1",
            params.lower_ambiguity_frequency ? "--min-alternate-fraction ${params.lower_ambiguity_frequency}" : "",
            params.min_ambiguity_count ? "--min-alternate-count ${params.min_ambiguity_count}" : "",
            "--pooled-continuous",
            params.min_coverage_depth ? "--min-coverage ${params.min_coverage_depth}" : "",
            "--gvcf",
            "--gvcf-dont-use-chunk true",
        ].join(' ').trim()
    }

    withName: ARTIC_GUPPYPLEX {
        ext.args   = [
            params.min_ont_read_quality ? "--quality ${params.min_ont_read_quality}" : '',
            params.min_ont_read_length ? "--min-length ${params.min_ont_read_length}" : '',
            params.max_ont_read_length ? "--max-length ${params.max_ont_read_length}" : '',
            params.skip_ont_quality_check ? "--skip-quality-check" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ARTIC_MINION {
        ext.args      = [
            "--normalise ${params.normalise_depth}",
            params.manual_clair3_model ? "--model ${params.manual_clair3_model}" : '',
            params.min_mapping_quality ? "--min-mapq ${params.min_mapping_quality}" : '',
            params.primer_match_threshold ? "--primer-match-threshold ${params.primer_match_threshold}" : '',
            params.min_coverage_depth ? "--min-depth ${params.min_coverage_depth}" : '',
            params.allow_mismatched_primers ? "--allow-mismatched-primers" : "",
        ].join(' ').trim()
        publishDir    = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.endsWith('.primertrimmed.rg.sorted.bam') || filename.endsWith('.primertrimmed.rg.sorted.bam.bai') ? filename.replace('.primertrimmed.rg.sorted.bam', '.primertrimmed.sorted.bam') : filename.endsWith('.normalised.vcf.gz') ? filename.replace('.normalised.vcf.gz', '.vcf.gz') : filename },
        ]
        errorStrategy = { task.exitStatus == 20 ? 'ignore' : 'terminate' }
    }

    withName: ARTIC_ALIGNTRIM {
        ext.args   = [
            "--normalise ${params.normalise_depth}",
            params.min_mapping_quality ? "--min-mapq ${params.min_mapping_quality}" : '',
            params.primer_match_threshold ? "--primer-match-threshold ${params.primer_match_threshold}" : '',
            params.allow_mismatched_primers ? "--allow-incorrect-pairs" : "",
            "--no-read-groups",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: BWAMEM2_MEM {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.endsWith('.bam') ? filename.replace('.bam', '.sorted.bam') : filename },
        ]
    }

    withName: TRIMMOMATIC {
        ext.args      = "LEADING:30 TRAILING:30 SLIDINGWINDOW:4:20 MINLEN:35"
        errorStrategy = { task.exitStatus == 1 ? 'ignore' : 'terminate' }
    }

    withName: BCFTOOLS_NORM {
        ext.args   = [
            "--write-index=tbi"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: BCFTOOLS_VIEW {
        ext.args   = { "--include 'INFO/ConsensusTag==\"${meta.vartype}\"' --write-index=tbi --output-type z" }
        ext.prefix = { "${meta.id}.${meta.vartype}" }
    }

    withName: BCFTOOLS_CONSENSUS_AMBIGUOUS {
        ext.args   = [
            "--iupac-codes",
            "--samples -",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.preconsensus" }
    }

    withName: BCFTOOLS_CONSENSUS_FIXED {
        ext.args   = ["--samples -"].join(' ').trim()
        ext.prefix = { "${meta.id}.consensus" }
    }

    withName: SAMTOOLS_DEPTH {
        ext.args = "-a"
    }

    withName: SEQKIT_REPLACE_ILLUMINA {
        ext.args   = { "-p '^(\\S*) *.*\$' -r '${meta.id} \${1}_artic-network/amplicon-nf_${workflow.manifest.version}'" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.fasta') ? filename.replace('.fasta', '.consensus.fasta') : filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SEQKIT_REPLACE_ONT {
        ext.args   = { "-p 'artic-network/fieldbioinformatics_.*\$' -r 'artic-network/amplicon-nf_${workflow.manifest.version}'" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.fasta') ? filename.replace('.fasta', '.consensus.fasta') : filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SEQKIT_GREP_FASTAS {
        ext.args   = { "--pattern '${meta.chrom}' --use-regexp --by-name" }
        ext.prefix = { "${meta.chrom}.unaligned_chroms" }
    }

    withName: SEQKIT_GREP_REFS {
        ext.args   = { "--pattern '${meta.chrom}' --use-regexp --by-name" }
        ext.prefix = { "${meta.chrom}.reference" }
    }

    withName: MAFFT_ALIGN {
        ext.prefix    = { "${meta.chrom}_${meta.scheme ? meta.scheme.replace("/", "_") : meta.custom_scheme_name ? meta.custom_scheme_name : 'unknown_scheme'}_aligned-consensus" }
        ext.args      = "--6merpair"
        errorStrategy = { task.exitStatus == 1 ? 'retry' : 'terminate' }
        maxRetries    = 3
        publishDir    = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            pattern: "*.fas",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.replace('.fas', '.fasta') },
        ]
    }

    withName: GENERATE_SAMPLE_REPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: GENERATE_RUN_REPORT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: MULTIQC {
        ext.args   = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/pipeline_info/" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
        ]
    }
}
