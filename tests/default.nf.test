nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"

    test("-profile test") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we test pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/amplicon-nf_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    "artic-sars-cov-2-400-v3.0.0_amplicon-nf_run-report.html - minimum file size: ${file("$outputDir/artic-sars-cov-2_400_v3.0.0_amplicon-nf_run-report.html").size() >= 4000000}",
                    "test_custom_scheme_name_amplicon-nf_run-report.html - minimum file size: ${file("$outputDir/test_custom_scheme_name_amplicon-nf_run-report.html").size() >= 4000000}",
                    file("$outputDir/MN908947.3_artic-sars-cov-2_400_v3.0.0_aligned-consensus.fasta").exists(),
                    file("$outputDir/MN908947.3_test_custom_scheme_name_aligned-consensus.fasta").exists(),
                    file("$outputDir/artic-sars-cov-2_400_v3.0.0_qc_results.tsv").exists(),
                    file("$outputDir/test_custom_scheme_name_qc_results.tsv").exists(),
                    "illumina_amplicon_test/illumina_amplicon_test_amplicon-nf_sample-report.html - minimum file size: ${file("$outputDir/illumina_amplicon_test/illumina_amplicon_test_amplicon-nf_sample-report.html").size() >= 4000000}",
                    file("$outputDir/illumina_amplicon_test/illumina_amplicon_test.amplicon_depths.tsv").exists(),
                    file("$outputDir/illumina_amplicon_test/illumina_amplicon_test.consensus.fasta").exists(),
                    file("$outputDir/illumina_amplicon_test/illumina_amplicon_test.primertrimmed.sorted.bam").exists(),
                    file("$outputDir/illumina_amplicon_test/illumina_amplicon_test.vcf.gz").exists(),
                    "nanopore_amplicon_test/nanopore_amplicon_test_amplicon-nf-report.html - minimum file size: ${file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test_amplicon-nf-report.html").size() >= 4000000}",
                    file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test.amplicon_depths.tsv").exists(),
                    file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test.consensus.fasta").exists(),
                    file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test.vcf.gz").exists(),
                    file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test.primertrimmed.sorted.bam").exists(),
                    file("$outputDir/nanopore_amplicon_test/nanopore_amplicon_test.sorted.bam").exists(),
                    file("$outputDir/illumina_fuzzy_match/illumina_fuzzy_match.consensus.fasta").exists(),
                    file("$outputDir/nanopore_fuzzy_match/nanopore_fuzzy_match.consensus.fasta").exists(),
                    ).match()
                }
            )
        }
    }
}
